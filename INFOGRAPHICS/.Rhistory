length <- nrow(reverse_csv)
xintercept <- seq.int(by = 10, length = length * 2, from = 0)
size <- rep(c(4,2), length = length * 2)
os_colours_vector <- map_chr(reverse_csv$tags, getOSColour)
question_colours_vector <- map2_chr(reverse_csv$title,
reverse_csv$content,
~{colours_array[(abs(digest::digest2int(paste(.x, .y))) %% 657) + 1]})
colours_vector <- c(rbind(os_colours_vector, question_colours_vector))
p <- ggplot() + theme_void()
p <- p + geom_vline(col = colours_vector,
xintercept = xintercept, size = size)
p
library(tidyverse)
colours_array <- colours()
getOSColour <- function(.x) {
case_when(
str_detect(.x, "mac-os|os-x|osx|macos") ~ "blue",
str_detect(.x, "linux|ubuntu|redhat|debian") ~ "green",
str_detect(.x, "windows-7|windows-8|windows-10") ~ "hotpink"
TRUE ~ "purple")
}
csv <- read.csv("https://raw.githubusercontent.com/rtanglao/rt-kits-api3/main/2020/2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales.csv")
# see https://stackoverflow.com/questions/39975317/how-to-reverse-the-order-of-a-dataframe-in-r
reverse_csv <- csv %>% map_df(rev)
length <- nrow(reverse_csv)
xintercept <- seq.int(by = 10, length = length * 2, from = 0)
size <- rep(c(4,2), length = length * 2)
os_colours_vector <- map_chr(reverse_csv$tags, getOSColour)
question_colours_vector <- map2_chr(reverse_csv$title,
reverse_csv$content,
~{colours_array[(abs(digest::digest2int(paste(.x, .y))) %% 657) + 1]})
colours_vector <- c(rbind(os_colours_vector, question_colours_vector))
p <- ggplot() + theme_void()
p <- p + geom_vline(col = colours_vector,
xintercept = xintercept, size = size)
p
library(tidyverse)
colours_array <- colours()
getOSColour <- function(.x) {
case_when(
str_detect(.x, "mac-os|os-x|osx|macos") ~ "blue",
str_detect(.x, "linux|ubuntu|redhat|debian") ~ "green",
str_detect(.x, "windows-7|windows-8|windows-10") ~ "hotpink"
TRUE ~ "purple")
}
script.dir <- dirname(sys.frame(1)$ofile)
library(tidyverse)
colours_array <- colours()
getOSColour <- function(.x) {
case_when(
str_detect(.x, "mac-os|os-x|osx|macos") ~ "blue",
str_detect(.x, "linux|ubuntu|redhat|debian") ~ "green",
str_detect(.x, "windows-7|windows-8|windows-10") ~ "hotpink"
TRUE ~ "purple")
}
#script.dir <- dirname(sys.frame(1)$ofile)
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
script.basename
script.name
source('~/Documents/GIT/rt-r-ggplot2-ruby-experiments/hourly-ff-question-barcode.R')
source('~/Documents/GIT/rt-r-ggplot2-ruby-experiments/hourly-ff-question-barcode.R')
source('~/Documents/GIT/rt-r-ggplot2-ruby-experiments/hourly-ff-question-barcode.R')
source('~/Documents/GIT/rt-r-ggplot2-ruby-experiments/hourly-ff-question-barcode.R')
thisFile <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
print(thisFile)
thisFile <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
print(thisFile())
thisFile <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
thisFile()
thisFile <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
thisFile()
source('~/Documents/GIT/rt-r-ggplot2-ruby-experiments/hourly-ff-question-barcode.R')
cat(paste("Rscript", script.name, "2020 10 20 23"))
script.name = "roland.R"
cat(paste("Rscript", script.name, "2020 10 20 23"))
hour = 3
if (hour < 0 || hour > 23) {
args <- c("--help")
}
library(tibbletime)
install.packages("tibbletime")
library(tibbletime)
csv <- read.csv("https://raw.githubusercontent.com/rtanglao/rt-kits-api3/main/2020/2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales.csv")
View(csv)
csv %>%
filter_time('2020-10-20 0' ~ '2020-10-20 0')
csv %>%
filter_time('2020-10-20 0' ~ '2020-10-20 0')
csv_tt <- as_tbl_time(csv, index = created)
library(lubridate)
csv_time <- csv %>%
mutate(created_time = parse_date_time(created))
View(csv)
parse_date_time("2020-10-20 16:52:50 -0700")
parse_date_time("2020-10-20 16:52:50 -0700", orders = "ymd")
parse_date_time("2020-10-20 16:52:50 -0700", orders = "ymdHMS"")
""
parse_date_time("2020-10-20 16:52:50 -0700", orders = "ymdHMS")
parse_date_time("2020-10-20 16:52:50 -0700", orders = "ymdzHMS")
parse_date_time("2020-10-20 16:52:50 -0700", orders = "ymdHMSz")
csv_time <- csv %>%
mutate(created_time = parse_date_time(created, orders = "ymdHMSz"))
head(csv)
shape(csv)
csv_time <- csv %>%
mutate(created_time = parse_date_time(created, orders = "ymdHMSz"))
View(csv)
class(csv)
libary(lubridate)
library(lubridate)
csv_time <- csv %>%
mutate(created_time = parse_date_time(created, orders = "ymdHMSz"))
csv_time <-
csv %>%
d
library(tidyverse)
csv %>%
mutate(created_time = parse_date_time(created, orders = "ymdHMSz"))
csv_time
csv_time <-
csv %>%
mutate(created_time = parse_date_time(created, orders = "ymdHMSz"))
View(csv_time)
View(csv_time)
csv_tt <- as_tbl_time(csv_time, index = created_time)
View(csv_tt)
csv_tt %>%
filter_time('2020-10-20 0' ~ '2020-10-20 0')
time_tibble <- filter_time('2020-10-20 0' ~ '2020-10-20 0')
time_tibble <- csv_tt %>% filter_time('2020-10-20 0' ~ '2020-10-20 0')
reverse_csv <- csv %>% map_df(rev)
csv_time <-
reverse_csv %>%
mutate(created_time = parse_date_time(created, orders = "ymdHMSz"))
csv_tt <- as_tbl_time(csv_time, index = created_time)
csv_tt %>%
filter_time('2020-10-20 0' ~ '2020-10-20 0')
View(csv_tt)
View(csv_tt)
hour0_csv <- csv_tt %>%
filter_time('2020-10-20 0' ~ '2020-10-20 0')
View(hour0_csv)
as.Date("2010-9-1")
as.Date("2010-9-1 00:00:00")
as.DateTime("2010-9-1 00:00:00")
as.Time("2010-9-1 00:00:00")
ymd_hms("2017-01-31 20:11:59")
ymd_hms("2017-1-31 20:11:59")
View(hour0_csv)
hour0_csv
print(hour0_csv)
View(csv_time)
csv_tt2 <- as_tbl_time(reverse_csv, index = created)
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
#!/usr/bin/env Rscript
library(tidyverse)
library(tibbletime)
library(lubridate)
library(DBI)
library(RSQLite)
colours_array <- colours()
getOSColour <- function(.x) {
case_when(
str_detect(.x, "mac-os|os-x|osx|macos") ~ "blue",
str_detect(.x, "linux|ubuntu|redhat|debian") ~ "green",
str_detect(.x, "windows-7|windows-8|windows-10") ~ "hotpink",
TRUE ~ "purple")
}
year = 2020
month = 10
day = 20
hour = 0
db_filename <- sprintf(
"%4.4d-%2.2d-%2.2d-%4.4d-%2.2d-%2.2d-firefox-creator-answers-desktop-all-locales.db",
year, month, day, year, month, day)
ffquestionsdb <- dbConnect(RSQLite::SQLite(), db_filename)
sqlitedf <- dbGetQuery(ffquestionsdb, "select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"
where (datetime(created) >= datetime('2020-10-20 01:00:00') AND
datetime(created) <= datetime('2020-10-20 01:59:59'));")
sqlitedf <- dbGetQuery(ffquestionsdb, "select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"
where (datetime(created) >= datetime('2020-10-20 01:00:00') AND
datetime(created) <= datetime('2020-10-20 01:59:59'));")
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"
where (datetime(created) >= datetime('2020-10-20 01:00:00') AND
datetime(created) <= datetime('2020-10-20 01:59:59'));')
sqlitedf <- dbGetQuery(ffquestionsdb, "select * from \"2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales\"
where (datetime(created) >= datetime('2020-10-20 01:00:00') AND
datetime(created) <= datetime('2020-10-20 01:59:59'));")
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"
where (datetime(created) >= datetime("2020-10-20 01:00:00") AND
datetime(created) <= datetime("2020-10-20 01:59:59"));')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from 2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales)')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales")')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from 2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * ')
sqlitedf <- dbGetQuery(ffquestionsdb, 'SELECT * FROM "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"')
print(ffquestionsdb)
sqlitedf <- dbGetQuery(ffquestionsdb, 'SELECT * FROM "sqlite_master')
sqlitedf <- dbGetQuery(ffquestionsdb, 'SELECT * FROM "sqlite_master"')
print(sqlitedf)
pwd()
cwd()
cd INFOGRAPHICS
lwd()
getwd()
setwd("/Users/roland/Documents/GIT/rt-r-ggplot2-ruby-experiments/INFOGRAPHICS
")
setwd("/Users/roland/Documents/GIT/rt-r-ggplot2-ruby-experiments/INFOGRAPHICS")
getwd()
ffquestionsdb <- dbConnect(RSQLite::SQLite(), db_filename)
sqlitedf <- dbGetQuery(ffquestionsdb, 'SELECT * FROM "sqlite_master"')
print(sqlitedf)
sqlitedf <- dbGetQuery(ffquestionsdb, 'SELECT * FROM "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"')
sqlitedf <- dbGetQuery(ffquestionsdb, 'select * from "2020-10-20-2020-10-20-firefox-creator-answers-desktop-all-locales"
where (datetime(created) >= datetime("2020-10-20 01:00:00") AND
datetime(created) <= datetime("2020-10-20 01:59:59"));')
query_str <- sprintf(
"select * from \"%s\" where (datetime(created) >= datetime(\"%s %2-2d:00:00\") AND
datetime(created) <= datetime(\"%date_str %2-2d:59:59\"));",
date_str, date_str
)
date_str <- sprint(
"%4.4d-%2.2d-%2.2d %2-2d",year, month, day, hour)
ffquestionsdb <- dbConnect(RSQLite::SQLite(), db_filename)
query_str <- sprintf(
"select * from \"%s\" where (datetime(created) >= datetime(\"%s %2-2d:00:00\") AND
datetime(created) <= datetime(\"%date_str %2-2d:59:59\"));",
date_str, date_str
)
date_str <- sprintf(
"%4.4d-%2.2d-%2.2d %2-2d",year, month, day, hour)
print(date_str)
query_str <- sprintf(
"select * from \"%s\" where (datetime(created) >= datetime(\"%s %2-2d:00:00\") AND
datetime(created) <= datetime(\"%date_str %2-2d:59:59\"));",
date_str, date_str
)
hour
date_str
date_str <- sprintf(
"%4.4d-%2.2d-%2.2d %2-2d",year, month, day, hour)
date_str
date_str <- sprintf(
"%4.4d-%2.2d-%2.2d %2.2d",year, month, day, hour)
date_str <- sprintf(
"%4.4d-%2.2d-%2.2d %2.2d",year, month, day, hour)
date_str
query_str <- sprintf(
"select * from \"%s\" where (datetime(created) >= datetime(\"%s:00:00\") AND
datetime(created) <= datetime(\"%s:59:59\"));",
date_str, date_str
)
base_name <-
sprintf"%4.4d-%2.2d-%2.2d-%4.4d-%2.2d-%2.2d-firefox-creator-answers-desktop-all-locales",
year, month, day, year, month, day)
db_filename <- sprintf("%$.db", base_name)
date_str <- sprintf(
"%4.4d-%2.2d-%2.2d %2.2d",year, month, day, hour)
query_str <- sprintf(
"select * from \"%s\" where (datetime(created) >= datetime(\"%s:00:00\") AND
datetime(created) <= datetime(\"%s:59:59\"));",
base_name, date_str, date_str
)
base_name <-
sprintf("%4.4d-%2.2d-%2.2d-%4.4d-%2.2d-%2.2d-firefox-creator-answers-desktop-all-locales",
year, month, day, year, month, day)
db_filename <- sprintf("%$.db", base_name)
date_str <- sprintf(
"%4.4d-%2.2d-%2.2d %2.2d",year, month, day, hour)
base_name <-
sprintf("%4.4d-%2.2d-%2.2d-%4.4d-%2.2d-%2.2d-firefox-creator-answers-desktop-all-locales",
year, month, day, year, month, day)
db_filename <- sprintf("%$.db", base_name)
date_str <- sprintf(
"%4.4d-%2.2d-%2.2d %2.2d",year, month, day, hour)
query_str <- sprintf(
"select * from \"%s\" where (datetime(created) >= datetime(\"%s:00:00\") AND
datetime(created) <= datetime(\"%s:59:59\"));",
base_name, date_str, date_str
)
query_str
sqlitedf <- dbGetQuery(ffquestionsdb, query_str)
View(sqlitedf)
install.packages("crayons")
install.packages("crayon")
install.packages("crayon")
install.packages("crayon")
install.packages("crayon")
install.packages("crayon")
col_align(red("foobar"), 20, "left")
library(crayon)
col_align(red("foobar"), 20, "left")
show_ansi_colors()
q <- ggplot() + theme_void()
library(tidyverse)
q <- ggplot() + theme_void()
q
q + annotate("pink text", x = 0, y = 0, color="pink")
q + annotate("text", label="pink text", x = 0, y = 0, color="pink")
q + annotate("text", label="blue text", x = 0, y = 0, color="blue")
q + annotate("text", label="blue text", x = 0, y = 0, fill="blue")
q + annotate("text", label=bold("blue text"), x = 0, y = 0, color="blue")
q + annotate("text", label = "paste(italic(R)), x = 0, y = 0, color="blue")
q + annotate("text", label = "paste(italic(R))", x = 0, y = 0, color="blue")
q + annotate("text", label = "\"paste(italic(R)\")", x = 0, y = 0, color="blue")
q + annotate("text", label = "paste(italic(R) ^ 2, \" = .75\"), x = 0, y = 0, color="blue")
q + annotate("text", label = "paste(italic(R) ^ 2, \" = .75\"), x = 0, y = 0, color="blue", parse=TRYE)
q + annotate("text", label = "paste(italic(R) ^ 2, \" = .75\"), x = 0, y = 0, color="blue", parse=TRUE)
R = 5
q + annotate("text", label = "paste(italic(R) ^ 2, \" = .75\"), x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "paste(italic(R) ^ 2, \" = .75\")", x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "paste(bold(R) ^ 2, \" = .75\")", x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "paste(bold(R) ^ 2, \"blue text")", x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "paste(bold(R) ^ 2, \"blue text\")", x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "bold(\"blue text\")", x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "bold(\"blue text\")", x = 0, y = 0, color="blue")
q + annotate("text", label = "bold(\"blue text\")", x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "bold(\"bold blue text\")", x = 0, y = 0, color="blue", parse=TRUE)
q + annotate("text", label = "paste(bold(R) ^ 2, \"blue text\")", x = 0, y = 0, color="blue", parse=TRUE)
test_str = "roland"
str_sub(test_str, 5, 5 + 80)
integer(3)
View(reverse_csv)
View(sqlitedf)
getRandomQuestionText <- function(.x, .y) {
# pick a random index between 1 and 80
# and then get the next 79 characters of text from that index
index <- sample(1:80, 1)
tplusc = paste(title, content)
substr = str_sub(tplusc, index, index + 79)
paste0("bold(\"",substr, "\")")
}
y <- seq.int(by = 10,length = length, from = 0)
length = nrow(reverse_df)
reverse_df <- sqlitedf %>% map_df(rev)
length = nrow(reverse_df)
print(reverse_df)
length
length
y <- seq.int(by = 10,length = length, from = 0)
y
x <- integer(length)
x
os_colours_vector <- map_chr(reverse_df$tags, getOSColour)
os_colours_vector
question_text <- map2_chr(
reverse_df$title,
reverse_df$content, getRandomQuestionText)
getRandomQuestionText <- function(.x, .y) {
# pick a random index between 1 and 80
# and then get the next 79 characters of text from that index
index <- sample(1:80, 1)
tplusc = paste(.x, .y)
substr = str_sub(tplusc, index, index + 79)
paste0("bold(\"",substr, "\")")
}
question_text <- map2_chr(
reverse_df$title,
reverse_df$content, getRandomQuestionText)
question_text
p <- ggplot() + theme_void()
p <- p + annotate(
"text", label = question_text, x = x, y=y,
color = os_colours_vector, parse = TRUE)
p
library(rvest)
View(reverse_df)
htext = "<p>Hey, this just recently started happening but whenever I try to playback video (mainly on twitch) the tab crashes immediately. </p><p>I've tried starting Firefox in safemode and disabling add-ons; crashing still occurs either way. I tried opening streams on Chrome and they open up fine. I have also tried clearing my cache and disabling hardware acceleration. Lastly, I have also ran windows DISM and sfc. </p><p>Also, youtube videos work fine but I can't watch twitch streams. </p><p>Here are my crash reports: <a href="https://crash-stats.mozilla.org/report/index/78bc74ac-8f7c-4ced-938e-5c7b60201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/78bc74ac-8f7c-4ced-938e-5c7b60201020</a> <a href="https://crash-stats.mozilla.org/report/index/9a8a8819-2a42-4600-aeae-78c430201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/9a8a8819-2a42-4600-aeae-78c430201020</a> <a href="https://crash-stats.mozilla.org/report/index/80d64d3b-d525-49b9-877c-17ba70201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/80d64d3b-d525-49b9-877c-17ba70201020</a> <a href="https://crash-stats.mozilla.org/report/index/72b02da3-cf5a-46a2-b024-a587d0201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/72b02da3-cf5a-46a2-b024-a587d0201020</a> </p>
"
htext = "<p>Hey, this just recently started happening but whenever I try to playback video (mainly on twitch) the tab crashes immediately. </p><p>I've tried starting Firefox in safemode and disabling add-ons; crashing still occurs either way. I tried opening streams on Chrome and they open up fine. I have also tried clearing my cache and disabling hardware acceleration. Lastly, I have also ran windows DISM and sfc. </p><p>Also, youtube videos work fine but I can't watch twitch streams. </p><p>Here are my crash reports: <a href="https://crash-stats.mozilla.org/report/index/78bc74ac-8f7c-4ced-938e-5c7b60201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/78bc74ac-8f7c-4ced-938e-5c7b60201020</a> <a href="https://crash-stats.mozilla.org/report/index/9a8a8819-2a42-4600-aeae-78c430201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/9a8a8819-2a42-4600-aeae-78c430201020</a> <a href="https://crash-stats.mozilla.org/report/index/80d64d3b-d525-49b9-877c-17ba70201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/80d64d3b-d525-49b9-877c-17ba70201020</a> <a href="https://crash-stats.mozilla.org/report/index/72b02da3-cf5a-46a2-b024-a587d0201020" rel="nofollow">https://crash-stats.mozilla.org/report/index/72b02da3-cf5a-46a2-b024-a587d0201020</a> </p>
"
htext = "<p>stuff</p>"
htext = "<p>stuff</p>"
htext
read_html(htext)
html_text(read_html(htext))
htext2="stuff"
html_text(read_html(htext2))
htext2
read_html(htext2)
getRandomQuestionText <- function(.x, .y) {
# pick a random index between 1 and 80
# and then get the next 79 characters of text from that index
index <- sample(1:80, 1)
tplusc = paste(.x, html_text(read_html(.y)))
substr = str_sub(tplusc, index, index + 79)
paste0("bold(\"",substr, "\")")
}
question_text <- map2_chr(
reverse_df$title,
reverse_df$content, getRandomQuestionText)
question_text
p <- ggplot() + theme_void()
p <- p + annotate(
"text", label = question_text, x = x, y=y,
color = os_colours_vector, parse = TRUE)
p
t = "the quick brown fox jumped over the"
t
tplusc_tokens <- tokenize_words(tplusc, stopwords = stopwords::stopwords("en"))
tplusc_tokens <- tokenize_words(t, stopwords = stopwords::stopwords("en"))
library(tokeninzers)
install.packages(tokenizers)
"tokenizers"
install.packages("tokenizers"")
""
install.packages("tokenizers")
library(tokenizers)
tplusc_tokens <- tokenize_words(t, stopwords = stopwords::stopwords("en"))
library(stopwords)
install.packages(stopwords)
install.packages("stopwords")
library(stopwords)
tplusc_tokens <- tokenize_words(t, stopwords = stopwords::stopwords("en"))
tplusc_tokens
length(tplusc_tokens)
as.character(tplusc_tokens)
as.string(tplusc_tokens)
as.array(tplusc_tokens)
aaa <- as.array(tplusc_tokens)
aaa
aaa[1]
nrow(tplusc_tokens)
as.vector(tplusc_tokens)
vvv = as.vector(tplusc_tokens)
length(vvv)
lllll = c("qucick", "brown")
lllll
length(lllll)
View(tplusc_tokens)
ttplusc_tokens[[1]]
ttplusc_tokens[1]
tplusc_tokens[1]
tplusc_tokens[2]
tplusc_tokens[1][1]
unlist(tplusc_tokens)
length(unlist(tplusc_tokens))
index <- sample(1:80, 3)
index
index[1]
sort(index)
sort(index)[1]
a <- 1
a
xy <- if(a==1) 1 else 2
xy
library("ggplot2")library("ggimage")set.seed(2017-02-21)d <- data.frame(x = rnorm(10),y = rnorm(10),image = sample(c("https://www.r-project.org/logo/Rlogo.png","https://jeroenooms.github.io/images/frink.png"),size=10, replace = TRUE))ggplot(d, aes(x, y)) + geom_image(aes(image=image))
library("ggplot2")
library("ggimage")
set.seed(2017-02-21)
d <- data.frame(x = rnorm(10),y = rnorm(10),image = sample(c("https://www.r-project.org/logo/Rlogo.png","https://jeroenooms.github.io/images/frink.png"),size=10, replace = TRUE))
ggplot(d, aes(x, y)) + geom_image(aes(image=image))
install.packages("ggimage")
library("ggplot2")
library("ggimage")
set.seed(2017-02-21)
d <- data.frame(x = rnorm(10),y = rnorm(10),image = sample(c("https://www.r-project.org/logo/Rlogo.png","https://jeroenooms.github.io/images/frink.png"),size=10, replace = TRUE))
ggplot(d, aes(x, y)) + geom_image(aes(image=image))
d
